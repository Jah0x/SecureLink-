name: Build & Push Docker
on:
  push:
    branches: [ "main" ]

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      # owner в нижнем регистре для GHCR
      - name: Set lowercase owner
        shell: bash
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      # Build image and LOAD it into runner for smoke test (no push yet)
      - uses: docker/build-push-action@v6
        with:
          context: .
          tags: app:ci
          load: true

      # Smoke test: start dependencies and verify endpoints
      - name: Create CI docker network
        run: docker network create ci-net || true

      - name: Start Postgres (service)
        run: |
          docker run -d --rm --name db --network ci-net \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=test \
            -p 5432:5432 \
            --health-cmd="pg_isready -U postgres -d test" \
            --health-interval=2s --health-timeout=2s --health-retries=60 \
            postgres:16-alpine

      - name: Wait for Postgres to be healthy
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..120}; do
            status="$(docker inspect -f '{{.State.Health.Status}}' db || echo starting)"
            if [[ "$status" == "healthy" ]]; then exit 0; fi
            sleep 1
          done
          echo "Postgres did not become healthy in time"
          docker logs db || true
          exit 1

      - name: Start app container
        run: |
          docker run -d --rm --name app-ci --network ci-net -p 5173:5173 \
            -e NODE_ENV=production \
            -e DB_DRIVER=pg \
            -e DB="postgresql://postgres:postgres@db:5432/test?sslmode=disable" \
            -e SESSION_SECRET="ci" \
            -e NEXT_PUBLIC_APP_BASE_URL="http://127.0.0.1:5173" \
            -e PUBLIC_APP_ORIGIN="http://127.0.0.1:5173" \
            app:ci

      - name: Wait for /healthz
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..120}; do
            code="$(curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:5173/healthz || true)"
            if [[ "$code" == "200" ]]; then exit 0; fi
            sleep 1
          done
          echo "App /healthz is not ready"
          docker logs app-ci || true
          exit 1

      - name: Smoke: /api/auth/login must NOT be 404
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" \
                 -X POST http://127.0.0.1:5173/api/auth/login \
                 -H "content-type: application/json" -d '{}')
          if [ "$code" = "404" ]; then
            echo "/api/auth/login returned 404"
            docker logs app-ci || true
            exit 1
          fi
          echo "login status=$code (ok, главное что не 404)"

      - name: Dump logs & cleanup
        if: always()
        run: |
          docker ps -a || true
          docker logs app-ci || true
          docker logs db || true
          docker rm -f app-ci db || true

      # Login to GHCR and PUSH production tags
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/securelink:latest
            ghcr.io/${{ env.OWNER_LC }}/securelink:sha-${{ github.sha }}
